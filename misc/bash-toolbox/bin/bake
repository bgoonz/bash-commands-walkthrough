#!/usr/bin/env bash-toolbox
#$ @{version} - bake
#$
#$ Make a specific task invoking by name.
#$
#$ Usage:
#$   bake [-f] [BAKEFILE] [TASK] ...
#$   bake [TASK] ...
#$   bake [OPTIONS] ...
#$
#$ Options:
#$   -f    Load task file.
#$   -l    List task descriptions.
#$   -n    List task names.
#$   -h    Display this message.
#$   -v    Display version.
#$

#1 bake(1) -- Bash-Toolbox Make
#1 ============================
#1
#1 ## SYNOPSIS
#1
#1 `bake` [-f] [TASK_FILE] [TASK_NAME] ...  
#1 `bake` [TASK_NAME] ...  
#1 `bake` [OPTIONS] ...  
#1
#1 ## DESCRIPTION
#1
#1 A lightweight build automation like GNU/Make and Rake. It is a Syntactic
#1 sugar based which use Bash.
#1
#1 This script application should be used to handle tasks defined
#1 `Bakefile` or `bakefile`.
#1
#1 ## OPTIONS
#1
#1 * `-f`:
#1   Load task file instead the default Bakefile.
#1
#1 * `-l`:
#1   List task descriptions. Use this option when you need remember the task
#1   name and goal.
#1
#1 * `-n`:
#1    List task names.
#1
#1 * `-h`:
#1   Display this message.
#1
#1 * `-v`:
#1   Display version.
#1
#1 ## AUTHOR
#1
#1 Written by Hallison Batista &lt;hallison@codigorama.com&gt;
#1
#1 ## COPYRIGHT
#1
#1 Copyright (C) 2009, 2010, 2011 Codigorama &lt;opensource@codigorama.com&gt;
#1
#1 Permission is hereby granted, free of charge, to any person obtaining a
#1 copy of this software and associated documentation files (the "Software"),
#1 to deal in the Software without restriction, including without limitation
#1 the rights to use, copy, modify, merge, publish, distribute, sublicense,
#1 and/or sell copies of the Software, and to permit persons to whom the
#1 Software is furnished to do so, subject to the following conditions:
#1
#1 The above copyright notice and this permission notice shall be included in
#1 all copies or substantial portions of the Software.
#1
#1 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#1 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#1 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
#1 THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#1 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#1 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
#1 DEALINGS IN THE SOFTWARE.
#1
#1 ## SEE ALSO
#1
#1 [bash-toolbox(1)](bash-toolbox.1.html), [bake(3)](bake.3.html),
#1 [bakefile(5)](bakefile.5.html), [bcmd(1)](bcmd.1.html)
#1

#5 file=bakefile.5
#5 bakefile(5) -- Bash-Toolbox Make file
#5 =====================================
#5
#5 ## DESCRIPTION
#5
#5 The `Bakefile` is a set of tasks that will be load and invoke by `bake`
#5 command.
#5
#5 ## TASKS
#5
#5 ### DESCRIBED TASKS
#5
#5 Task is a function that is inside the stack tasks. The tasks that will be used
#5 in command line must be describe using the function `desc`
#5
#5 You define a new task using the following methods:
#5
#5 * Describe a new task with name and description using the command `desc`. The
#5   `desc` command will push the information to the stack of tasks. Then it
#5   necessary write the defined task..
#5 * Define the new task using the command `task` like a function.
#5
#5 Example:
#5
#5     desc <task-name> <task-description>  
#5     task <task-name> {  
#5       # ... task-body  
#5     }  
#5
#5 You can sign all the tasks and their descriptions and then write them.
#5
#5     # Description block
#5     desc <task1> <description1>
#5     desc <task2> <description2>
#5     desc <task3> <description3>
#5     desc <task4> <description4>
#5
#5     task <task1> {
#5       # ... task1
#5     }
#5
#5     task <task2> {
#5       # ... task2
#5     }
#5
#5     task <task3> {
#5       # ... task3
#5     }
#5
#5     task <task4> {
#5       # ... task4
#5     }
#5
#5 ### ANONYMOUS TASKS
#5
#5 When you do not describe a task, then, it is anonymous and your scope is
#5 only internal, that is, it can not invoked by `bake` externally. This is
#5 useful when you want write a task only invoked by others tasks. Example:
#5
#5     desc install "Install the application"
#5     task install {
#5       build # invoking build task
#5       # ... install
#5     }
#5
#5     # anonymous build
#5     task build {
#5       # ... build
#5     }
#5
#5 ### NAMESPACED TASKS
#5
#5 You can define a task with namespace.
#5
#5     desc tar:gz "Create/update tarball package and compress using gzip"
#5     task tar:gz {
#5       # ... create tar.gz
#5     }
#5
#5 In this case, when a namespaced task is invoked, first check if namespace is
#5 defined as task inside the stack. If defined, then will be invoked first.
#5 Otherwise, the task is executed.
#5
#5     desc tar "Create/update tarball package"
#5     task tar {
#5       # ... create tar file or define variables
#5     }
#5
#5     desc tar:gz "Compress tarball using gzip"
#5     task tar:gz {
#5       # ... create tar.gz
#5     }
#5
#5     desc tar:bz2 "Compress tarball using bzip2"
#5     task tar:bz2 {
#5       # ... create tar.bz2
#5     }
#5
#5 Before invoke "tar:gz" or "tar:bz2" the namespace task "tar" will be invoked
#5 first.
#5
#5 ## AUTHORS
#5
#5 This manual page was written by Hallison Batista &lt;hallison@codigorama.com&gt;
#5
#5 ## SEE ALSO
#5
#5 [bake(1)](bake.1.html), [bake(3)](bake.3.html), [bcmd(1)](bcmd.1.html)
#5

# Timestamp: 2010-01-08 17:59:17 -04:00

include "${BASH_TOOLBOX_LIB}/cli"

source bake.sh
source content.sh
source status.sh

function has_task_file {
  return $(test -f ${task_file})
}

# List all task names and descriptions.
function list_all {
  for i in ${!task_names[@]}; do
    printf "%s\n    %-74s\n\n" "${task_names[i]}" "${task_descriptions[i]}"
  done
  printf $"Default: %s\n" "${task_default:-none}"
}

# List only task names
function list_names {
  echo "${task_names[*]// /\n}"
}

function has_tasks {
  return $(test "${task_names[*]}")
}

function list {
  if has_tasks; then
    "list_${1}"
    return 0
  else
    echo $"No tasks defined"
    return 1
  fi
}

# Invoke all tasks.
function invoke_all {
  for task in ${@}; do
    if defined ${task}; then
      invoke ${task}
    else
      fail $"task '${task}' not defined"
      fail $"task name is required, try '-l' to list all tasks"
      return 1
    fi
  done
  return 0
}

# Main function.
function bake {
  if has_task_file; then
    source ${task_file}
  fi

  while getopts ":f:lnhvd" option; do
    case ${option} in
      f)  # Set task file
          task_file=${OPTARG}
          source ${task_file}
      ;;
      l)  # Listing of all tasks
          list all
          return 0
      ;;
      n)  # Listing of only task names
          list names
          return 0
      ;;
      h)  # Usage
          usage
          return 0
      ;;
      v)  # Version
          echo "${BASH_TOOLBOX_VERSION} - ${BASH_SOURCE##*/}"
          return 0
      ;;
      :)  # Require arguments
          fail $"argument is required"
          return 1
      ;;
      *)  # Invalid arguments
          fail $"invalid argument '${OPTARG}', try -h for usage."
          return 1
      ;;
    esac
  done

  shift $((OPTIND - 1))

  declare -a tasknames=("${@}")

  if test "${tasknames[*]}"; then
    invoke_all "${tasknames[@]}"
  elif test "${task_default}"; then
    invoke "${task_default}"
  else
    fail $"there is no default task"
    return 1
  fi

  return 0
}

bake "${@}"

exit ${?}

# vim: filetype=sh

