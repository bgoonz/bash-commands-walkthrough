source version.bk

load ${VERSION_FILE}

WORKDIR=${PWD##*/}
BUILDPATH=build
PKGPATH=pkg
PKGNAME=${WORKDIR}-${VERSION[0]}
PKGDIR=${PKGPATH}/${PKGNAME}
GLOB=($(git ls-files))
STDOUT=${TMP}/bash-toolbox.dev.log

desc config "Configure Bash-Toolbox for installation in ${prefix:=/usr/local}" "
    Set the variables:
      prefix="${prefix}"
      bindir="${bindir:=${prefix}/bin}"
      libdir="${libdir:=${prefix}/lib/bash-toolbox}"
      libexecdir="${libexecdir:=${prefix}/libexec/bash-toolbox}"
      localstatedir="${localstatedir:=${prefix}/var}"
      sysconfdir="${sysconfdir:=${prefix}/etc}"
      datarootdir="${datarootdir:=${prefix}/share}"
      datadir="${datadir:=${datarootdir}/bash-toolbox}"
      mandir="${mandir:=${datarootdir}/man}"
      docdir="${docdir:=${datarootdir}/doc/bash-toolbox}"
"
task config {
  message --info "Configuring project"

  start "Setting variables"
    prefix="${prefix}"
    bindir="${bindir}"
    libdir="${libdir}"
    libexecdir="${libexecdir}"
    localstatedir="${localstatedir}"
    sysconfdir="${sysconfdir}"
    datarootdir="${datarootdir}"
    datadir="${datadir}"
    mandir="${mandir}"
    docdir="${docdir}"
  end

  start "Creating config file"
    rm config &> ${NULL}
    echo "prefix=\"${prefix}\""               >> config
    echo "bindir=\"${bindir}\""               >> config
    echo "libdir=\"${libdir}\""               >> config
    echo "libexecdir=\"${libexecdir}\""       >> config
    echo "localstatedir=\"${localstatedir}\"" >> config
    echo "sysconfdir=\"${sysconfdir}\""       >> config
    echo "datarootdir=\"${datarootdir}\""     >> config
    echo "datadir=\"${datadir}\""             >> config
    echo "mandir=\"${mandir}\""               >> config
    echo "docdir=\"${docdir}\""               >> config
    #echo "binaries=(${binaries[@]})"   >> config
    #echo "libraries=(${libraries[@]})" >> config
    #echo "resources=(${resources[@]})" >> config
    #echo "documents=(${documents[@]})" >> config
    #echo "manuals=(${manuals[@]})"     >> config
    #echo "shared=(${shared[@]})"       >> config
    #echo "extras=(${extras[@]})"       >> config
  end
}

desc build "Build directories and source files"
task build {
  invoke config

  message --info "Building sources"

  declare regexp=""

  start "Setting regular expressions for parsing"
    regexp="${regexp};"'s/\"\${_prefix.*}\"/\"'${prefix//\//\\/}'\"/g'
    regexp="${regexp};"'s/\"\${_bindir.*}\"/\"'${bindir//\//\\/}'\"/g'
    regexp="${regexp};"'s/\"\${_libdir.*}\"/\"'${libdir//\//\\/}'\"/g'
    regexp="${regexp};"'s/\"\${_libexecdir.*}\"/\"'${libexecdir//\//\\/}'\"/g'
    regexp="${regexp};"'s/\"\${_localstatedir.*}\"/\"'${localstatedir//\//\\/}'\"/g'
    regexp="${regexp};"'s/\"\${_sysconfdir.*}\"/\"'${sysconfdir//\//\\/}'\"/g'
    regexp="${regexp};"'s/\"\${_datarootdir.*}\"/\"'${datarootdir//\//\\/}'\"/g'
    regexp="${regexp};"'s/\"\${_datadir.*}\"/\"'${datadir//\//\\/}'\"/g'
    regexp="${regexp};"'s/\"\${_mandir.*}\"/\"'${mandir//\//\\/}'\"/g'
    regexp="${regexp};"'s/\"\${_docdir.*}\"/\"'${docdir//\//\\/}'\"/g'
  end

  start "Setting documentation labels"
    # Versioning
    regexp="${regexp};"'s/\"\${version.*}\"/\"Bash-Toolbox v'"${VERSION[0]} ${VERSION[1]} (${VERSION[2]})"'\"/g'
    regexp="${regexp};"'s/@{version}/Bash-Toolbox v'"${VERSION[0]} ${VERSION[1]} (${VERSION[2]})"'/g'
  end

  start "Building directories and files"
    for i in ${!GLOB[@]}; do
      declare source

      case "${GLOB[i]}" in
        bin/*   ) source="${BUILDPATH}/${bindir}/${GLOB[i]#*/}" ;;
        lib/*   ) source="${BUILDPATH}/${libdir}/${GLOB[i]#*/}" ;;
        etc/*   ) source="${BUILDPATH}/${sysconfdir}/${GLOB[i]#*/}" ;;
        doc/*   ) source="${BUILDPATH}/${docdir}/${GLOB[i]#*/}" ;;
        #man/*   ) source="${BUILDPATH}/${mandir}/${GLOB[i]#*/}" ;;
        tasks/* ) source="${BUILDPATH}/${datadir}/${GLOB[i]}" ;;
        test/*  ) source="${BUILDPATH}/${datadir}/${GLOB[i]}" ;;
        *       ) source="${BUILDPATH}/${docdir}/${GLOB[i]}" ;;
      esac
      mkdir -p "${source%/*}"
      sed -u "${regexp}" < "${GLOB[i]}" > "${source}"

      if [[ -x ${GLOB[i]} ]]; then
        chmod 755 "${source}"
      fi

      GLOB[i]=${source}
    done
  end

  # This file must not changed
  cp ${BASH_SOURCE} ${BUILDPATH}
}

desc package "Create package files ${PKGNAME}.tar.gz"
task package {
  message --info "Setting packages"

  declare pkgfile="${PKGDIR}.tar.gz"

  start "Creating structure"
    git archive --prefix=${PKGDIR}/ v${VERSION[0]} | tar xf -
  end

  start "Packaging ${pkgfile}"
    tar czvf "${pkgfile}" "${PKGDIR}"
  end
}

desc install "Install Bash-Toolbox in prefix=${prefix}"
task install {
  invoke build

  declare -a installed=()

  for i in ${!GLOB[@]}; do
    declare    source="${GLOB[i]#${BUILDPATH}/}"
    start "Installing ${source}"
      command install -pdv "${source%/*}"
      command install -pv "${GLOB[i]}" "${source}"
      installed=("${installed[@]}" "${source}")
    end
  done
  echo "installed=(${installed[@]})" >> config
}

desc uninstall "Uninstall Bash-Toolbox"
task uninstall {
  if test -f config; then
    message --info "Uninstalling Bash-Toolbox"

    source config

    declare -a directories=()

    for file in ${installed[@]}; do
      if test -f ${file}; then
        start "Removing file ${file}"
          rm ${file}
          directories=(${directories[@]} "${file%/*}")
        end
      fi
    done

    for dir in ${directories[@]}; do
      if test -d ${dir}; then
        start "Removing directory ${dir}"
          rm -rv ${dir}
        end
      fi
    done
  else
    fail "config file not found"
    return 1
  fi
}

desc reinstall "Reinstall Bash-Toolbox"
task reinstall {
  invoke uninstall
  invoke install
}

default config

# vim: filetype=sh

